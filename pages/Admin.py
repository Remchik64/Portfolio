import streamlit as st
import json
import os
from PIL import Image
import shutil
import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å",
    page_icon="‚öôÔ∏è",
    layout="wide"
)

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞—Ä–æ–ª—è
def check_password():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç `True` –µ—Å–ª–∏ –ø–∞—Ä–æ–ª—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π."""
    def password_entered():
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å."""
        if st.session_state["password"] == st.secrets["password"]:
            st.session_state["password_correct"] = True
            del st.session_state["password"]  # –£–¥–∞–ª—è–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ session_state
        else:
            st.session_state["password_correct"] = False

    if "password_correct" not in st.session_state:
        # –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –≤–≤–æ–¥–∞
        st.text_input(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", 
            type="password",
            on_change=password_entered,
            key="password"
        )
        return False
    elif not st.session_state["password_correct"]:
        # –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Å–Ω–æ–≤–∞
        st.text_input(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", 
            type="password",
            on_change=password_entered,
            key="password"
        )
        st.error("üòï –ü–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã–π")
        return False
    else:
        # –ü–∞—Ä–æ–ª—å –≤–µ—Ä–Ω—ã–π
        return True

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –∫–æ–Ω—Ç–µ–Ω—Ç–∞
if not check_password():
    st.stop()  # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç

def resize_image_with_aspect_ratio(image, target_size):
    """
    –ò–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π.
    –î–æ–±–∞–≤–ª—è–µ—Ç –±–µ–ª—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ.
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ —Ä–∞–∑–º–µ—Ä—ã
    width, height = image.size
    aspect = width / height

    # –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    target_width, target_height = target_size
    target_aspect = target_width / target_height

    if aspect > target_aspect:
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∏—Ä–µ —Ü–µ–ª–µ–≤–æ–≥–æ
        new_width = target_width
        new_height = int(new_width / aspect)
    else:
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—ã—à–µ —Ü–µ–ª–µ–≤–æ–≥–æ
        new_height = target_height
        new_width = int(new_height * aspect)

    # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –ø—Ä–æ–ø–æ—Ä—Ü–∏–π
    image = image.resize((new_width, new_height), Image.Resampling.LANCZOS)

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ü–µ–ª–µ–≤—ã–º–∏ —Ä–∞–∑–º–µ—Ä–∞–º–∏
    new_image = Image.new('RGB', target_size, (45, 45, 45))  # –¢—ë–º–Ω–æ-—Å–µ—Ä—ã–π —Ñ–æ–Ω
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
    left = (target_width - new_width) // 2
    top = (target_height - new_height) // 2
    
    # –í—Å—Ç–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —Ü–µ–Ω—Ç—Ä—É
    new_image.paste(image, (left, top))
    
    return new_image

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
def load_portfolio_data():
    if os.path.exists("data/portfolio_data.json"):
        with open("data/portfolio_data.json", "r", encoding='utf-8') as f:
            return json.load(f)
    return {
        "about": "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ, –≤–∞—à–µ–º –æ–ø—ã—Ç–µ –∏ –Ω–∞–≤—ã–∫–∞—Ö.",
        "projects": {
            "–ü—Ä–æ–µ–∫—Ç 1": {
                "description": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º React –∏ FastAPI",
                "image": "static/images/project1.jpg",
                "url": "Project_1",
                "details": {
                    "about": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                    "features": [
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 1: –û–ø–∏—Å–∞–Ω–∏–µ",
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 2: –û–ø–∏—Å–∞–Ω–∏–µ",
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 3: –û–ø–∏—Å–∞–Ω–∏–µ"
                    ],
                    "tech_stack": {
                        "frontend": ["React", "TypeScript", "Material-UI"],
                        "backend": ["Python", "FastAPI", "PostgreSQL"],
                        "devops": ["Docker", "AWS", "CI/CD"]
                    }
                }
            },
            "–ü—Ä–æ–µ–∫—Ç 2": {
                "description": "–ú–æ–±–∏–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Vue.js –∏ Node.js",
                "image": "static/images/project2.jpg",
                "url": "Project_2",
                "details": {
                    "about": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                    "features": [
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 1: –û–ø–∏—Å–∞–Ω–∏–µ",
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 2: –û–ø–∏—Å–∞–Ω–∏–µ",
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 3: –û–ø–∏—Å–∞–Ω–∏–µ"
                    ],
                    "tech_stack": {
                        "frontend": ["Vue.js", "Vuex", "Tailwind CSS"],
                        "backend": ["Node.js", "Express", "MongoDB"],
                        "devops": ["Git", "Jest", "Webpack"]
                    }
                }
            },
            "–ü—Ä–æ–µ–∫—Ç 3": {
                "description": "ML-–ø—Ä–æ–µ–∫—Ç —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TensorFlow",
                "image": "static/images/project3.jpg",
                "url": "Project_3",
                "details": {
                    "about": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                    "features": [
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 1: –û–ø–∏—Å–∞–Ω–∏–µ",
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 2: –û–ø–∏—Å–∞–Ω–∏–µ",
                        "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 3: –û–ø–∏—Å–∞–Ω–∏–µ"
                    ],
                    "tech_stack": {
                        "frontend": ["TensorFlow.js", "React", "D3.js"],
                        "backend": ["Python", "TensorFlow", "Flask"],
                        "devops": ["Docker", "Kubernetes", "MLflow"]
                    }
                }
            }
        },
        "contacts": {
            "email": "example@example.com",
            "linkedin": "your-linkedin",
            "github": "your-github",
            "resume": "https://hh.ru/resume/your-resume"
        }
    }

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
def save_portfolio_data(data):
    os.makedirs("data", exist_ok=True)
    with open("data/portfolio_data.json", "w", encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=4)
    st.success("–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
portfolio_data = load_portfolio_data()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.title("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ")

# –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
tab1, tab2, tab3 = st.tabs(["–û —Å–µ–±–µ", "–ü—Ä–æ–µ–∫—Ç—ã", "–ö–æ–Ω—Ç–∞–∫—Ç—ã"])

with tab1:
    st.header("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞ '–û —Å–µ–±–µ'")
    about_text = st.text_area("–û —Å–µ–±–µ", portfolio_data["about"], height=200)
    profile_image = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", type=['jpg', 'png', 'jpeg'])
    
    if profile_image:
        os.makedirs("static/images", exist_ok=True)
        with Image.open(profile_image) as img:
            if img.mode != 'RGB':
                img = img.convert('RGB')
            img = resize_image_with_aspect_ratio(img, (400, 400))
            img.save("static/images/profile.jpg", quality=95)
        st.image(profile_image, caption="–ù–æ–≤–æ–µ —Ñ–æ—Ç–æ –ø—Ä–æ—Ñ–∏–ª—è", width=200)

with tab2:
    st.header("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞–º–∏")
    
    # –í—ã–±–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    project_names = list(portfolio_data["projects"].keys())
    selected_project = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è", project_names)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞
    if st.button("–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–µ–∫—Ç"):
        new_project_name = f"–ü—Ä–æ–µ–∫—Ç {len(project_names) + 1}"
        portfolio_data["projects"][new_project_name] = {
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞",
            "image": "static/images/project1.jpg",
            "url": f"Project_{len(project_names) + 1}",
            "details": {
                "about": "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
                "features": ["–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 1", "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 2", "–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å 3"],
                "tech_stack": {
                    "frontend": [],
                    "backend": [],
                    "devops": []
                }
            }
        }
        st.rerun()
    
    if selected_project:
        project = portfolio_data["projects"][selected_project]
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏—è
        project["description"] = st.text_area(
            "–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞",
            project["description"]
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—è –¥–ª—è —Å—Å—ã–ª–æ–∫
        st.subheader("–°—Å—ã–ª–∫–∏ –Ω–∞ –ø—Ä–æ–µ–∫—Ç")
        if "links" not in project:
            project["links"] = {
                "github": "",
                "website": ""
            }
        
        project["links"]["github"] = st.text_input(
            "–°—Å—ã–ª–∫–∞ –Ω–∞ GitHub",
            project["links"].get("github", ""),
            placeholder="https://github.com/username/repository"
        )
        
        project["links"]["website"] = st.text_input(
            "–°—Å—ã–ª–∫–∞ –Ω–∞ —Å–∞–π—Ç –ø—Ä–æ–µ–∫—Ç–∞",
            project["links"].get("website", ""),
            placeholder="https://example.com"
        )
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–æ–µ–∫—Ç–∞
        st.subheader("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if "images" not in project:
            project["images"] = [project.get("image", "static/images/project1.jpg")]
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
        if "images_to_remove" not in st.session_state:
            st.session_state.images_to_remove = []
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        st.write("–¢–µ–∫—É—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞:")
        cols = st.columns(3)
        
        for idx, img_path in enumerate(project["images"]):
            if os.path.exists(img_path):
                with cols[idx % 3]:
                    st.image(img_path, width=200)
                    if st.button(f"üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", key=f"delete_img_{selected_project}_{idx}"):
                        st.session_state.images_to_remove.append(idx)
                        st.rerun()
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if st.session_state.images_to_remove:
            for idx in reversed(sorted(st.session_state.images_to_remove)):
                if idx < len(project["images"]):
                    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    img_path = project["images"][idx]
                    if os.path.exists(img_path):
                        try:
                            os.remove(img_path)
                        except:
                            pass
                    project["images"].pop(idx)
            st.session_state.images_to_remove = []
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        new_image = st.file_uploader(
            "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ",
            type=['jpg', 'png', 'jpeg'],
            key=f"project_images_{selected_project}"
        )
        
        if new_image:
            try:
                os.makedirs("static/images", exist_ok=True)
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                timestamp = int(time.time())
                image_path = f"static/images/project{selected_project[-1]}_{timestamp}.jpg"
                
                with Image.open(new_image) as img:
                    if img.mode != 'RGB':
                        img = img.convert('RGB')
                    img = resize_image_with_aspect_ratio(img, (800, 450))
                    img.save(image_path, quality=95)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
                project["images"].append(image_path)
                st.success("‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {str(e)}")
        
        # –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º
        project["image"] = project["images"][0] if project["images"] else "static/images/project1.jpg"

        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
        st.subheader("–î–µ—Ç–∞–ª–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        project["details"]["about"] = st.text_area(
            "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ",
            project["details"]["about"]
        )
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π
        st.subheader("–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        if st.button("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å"):
            project["details"]["features"].append("–ù–æ–≤–∞—è –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å: –û–ø–∏—Å–∞–Ω–∏–µ")
            st.rerun()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–∂–¥—É—é –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω–∏—è
        features_to_remove = []
        for i, feature in enumerate(project["details"]["features"]):
            col1, col2 = st.columns([8, 1])
            with col1:
                project["details"]["features"][i] = st.text_input(
                    f"–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å {i+1}",
                    feature,
                    key=f"feature_{selected_project}_{i}"
                )
            with col2:
                if st.button("üóëÔ∏è", key=f"delete_{selected_project}_{i}"):
                    features_to_remove.append(i)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–º–µ—á–µ–Ω–Ω—ã–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏
        if features_to_remove:
            for index in reversed(features_to_remove):
                project["details"]["features"].pop(index)
            st.rerun()
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–≥–æ —Å—Ç–µ–∫–∞
        st.subheader("–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫")
        for category in ["frontend", "backend", "devops"]:
            st.write(f"**{category.title()}**")
            tech_stack = st.text_input(
                f"–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ {category} (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)",
                ", ".join(project["details"]["tech_stack"][category])
            )
            project["details"]["tech_stack"][category] = [
                tech.strip() for tech in tech_stack.split(",") if tech.strip()
            ]

with tab3:
    st.header("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤")
    
    # Email —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Ñ–æ—Ä–º–∞—Ç–∞
    portfolio_data["contacts"]["email"] = st.text_input(
        "Email",
        portfolio_data["contacts"]["email"],
        placeholder="example@example.com"
    )
    
    # GitHub —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–∞
    github_username = portfolio_data["contacts"]["github"].replace("https://github.com/", "")
    github_username = st.text_input(
        "GitHub username",
        github_username,
        placeholder="username"
    )
    portfolio_data["contacts"]["github"] = f"https://github.com/{github_username}" if github_username else ""
    
    # LinkedIn —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –ø—Ä–µ—Ñ–∏–∫—Å–∞
    linkedin_username = portfolio_data["contacts"]["linkedin"].replace("https://linkedin.com/in/", "")
    linkedin_username = st.text_input(
        "LinkedIn username",
        linkedin_username,
        placeholder="username"
    )
    portfolio_data["contacts"]["linkedin"] = f"https://linkedin.com/in/{linkedin_username}" if linkedin_username else ""
    
    # –°—Å—ã–ª–∫–∞ –Ω–∞ —Ä–µ–∑—é–º–µ
    portfolio_data["contacts"]["project"] = st.text_input(
        "–°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ–µ–∫—Ç",
        portfolio_data["contacts"].get("project", ""),
        placeholder="https://example.com/your-project"
    )

# –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è", type="primary"):
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        portfolio_data["about"] = about_text
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        os.makedirs("data", exist_ok=True)
        os.makedirs("static/images", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
        save_portfolio_data(portfolio_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        st.info("‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
if st.button("‚Üê –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é"):
    st.switch_page("portfolio.py") 